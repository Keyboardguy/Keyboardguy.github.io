"use strict"

// IMPORTANT GLOBALS
let balancing_angle = 0;

class Connection {
    constructor(from, to, angle) {
        this.force = null;
        this.from = from;
        this.to = to;
        this.angle = angle;
        this._should_set_force = false;
    }

    is_known() {
        return this.force !== null;
    }

    calculate_force(force_to_balance, direction) {
        this._set_calculation_variables();
        this.force = Math.abs(force_to_balance / this._needed_trig_fun(direction)(this._acute_calc_angle_in_radians));

        // this resolved force is already signed, and assumers that it is a tie. the _calculate_type_and_sign function
        // will swap the forces if it turns out to be a strut.
        this._resolve_self();
        this._calculate_type_and_sign(force_to_balance, direction);
    }

    promise_to_set_force(force, type) {
        // The balanced angle will change, so the vector components of the force will change, so a promise is needed so the 
        // vector components can be set when the desired balanced angle is set.
        this._should_set_force = true;
 
        if (type !== "strut" && type !== "tie") {
            console.error("can only set struts or ties - promise to set force");
        }
        this._force_type = type;
        this.force = force;
    } 

    set_force() {
        if (!this._should_set_force) {
            return console.error(`This connection should not be set, but the function was called anyway - ${this.from}${this.to}`);
        }

        // this MUST be called after the balanced force is set, hence a promise is needed.
        this._resolve_self();
        if (this._force_type === "strut") {
            this.flip_force_signs();
        }
    }

    flip_force_signs() {
        this._calculation_horizontal_force *= -1;
        this._calculation_vertical_force *= -1;
    }

    _needed_trig_fun(direction) {
        if (direction === "horizontal") {
            return this._horizontal_trig_fn;
        } else if (direction === "vertical") {
            return this._vertical_trig_fn;
        } else {
            console.error("not horizontal or vertical force - _needed_trig_fun");
        }
    }

    _resolve_self() {
        const resolved_force = resolve_force(this.force, this.calculation_angle);
        this._calculation_horizontal_force = resolved_force[0];
        this._calculation_vertical_force = resolved_force[1]
    }

    _set_calculation_variables() {
        // save a little bit of computing power by doing this. 
        const calc_angle = this.calculation_angle;
        this._horizontal_trig_fn = Math.floor(calc_angle / 90) % 2 === 0 
                                   ? Math.sin
                                   : Math.cos;   
        this._vertical_trig_fn = Math.floor(calc_angle / 90) % 2 === 0 
                                ? Math.cos
                                : Math.sin;  
        this._acute_calc_angle_in_radians = deg_to_rad(calc_angle % 90);
    }

    _calculate_type_and_sign(force_to_balance, known_direction) {
        let comparing_force = known_direction === "vertical"
                              ? this._calculation_vertical_force
                              : known_direction === "horizontal"
                              ? this._calculation_horizontal_force
                              : console.error("not vertical or horizontal - _calculate_type_and_sign");
        
        if (force_to_balance - comparing_force === 0) {
            // same sign - can't both be the same sign, so swap the force signs and make it a strut.
            this.flip_force_signs();
            this._force_type = "strut";
        } else {
            this._force_type = "tie";
        }
    }

    // calculation_angle_getter 
    get calculation_angle() {
        return make_positive_angle(this.angle - balancing_angle);
    }
    
    // protect properties.
    get force_type() {
        return this._force_type;
    }

    get horizontal_trig_fn() {
        return this._horizontal_trig_fn;
    }

    get vertical_trig_fn() {
        return this._vertical_trig_fn;
    }

    get calculation_horizontal_force() {
        return this._calculation_horizontal_force;
    }

    get calculation_vertical_force() {
        return this._calculation_vertical_force;
    }

    get acute_calc_angle_in_radians() {
        return this._acute_calc_angle_in_radians;
    }

    get should_set_force() {
        return this._should_set_force;
    }
}

class Point {
    constructor(name) {
        this.name = name;
        this.connections = [];
        this.applied_forces = [];
        this._vertical_unbalanced_force = 0;
        this._horizontal_unbalanced_force = 0;
        this._unknown_verticals = 0;
        this._unknown_horizontals = 0;
        this._applied_vertical_force = 0;
        this._applied_horizontal_force = 0;
        this._initialised = false;
    }

    // Don't call this directly. Use attempt_to_solve_force if you want to call this.
    start_solving_connections(applied_force, all_connections) {
        // This always rotates the force to be vertical. So applied_horizontal_force doesn't exist.
        let starting_force = 0;
        for (const force of this.applied_forces) {
            if (force === applied_force) {
                starting_force = force;
                break;
            }
        }

        if (starting_force === 0) {
            return 0;
        }

        balancing_angle = starting_force.angle;
        this._get_unknowns_and_forces();

        if (this._unknown_verticals === 1 || this._unknown_horizontals === 1) {
            for (const connection of all_connections) {
                if (connection.should_set_force) {
                    connection.set_force();
                }
            }
            this.solve_connections();
        } else {
            console.log("not possible");
            return 0;
        }
    }

    solve_connections() {
        if (this._is_finished()) {
            return;
        }

        if (!this._initialised) {
            this._initialised = true;
            this.applied_forces.forEach(force => {
                const resolved_force = resolve_force(force.force, force.angle - balancing_angle);
                this._applied_horizontal_force += resolved_force[0];
                this._applied_vertical_force += resolved_force[1];
            })
        }

        this._get_unknowns_and_forces();

        if (this._vertical_unbalanced_force === 0 && this._horizontal_unbalanced_force === 0) {
            return;
        }

        if (this._unknown_verticals === 1 && this._vertical_unbalanced_force !== 0) {
            this._solve_unknown_connection([90, 270], this._vertical_unbalanced_force, "vertical");
            this._get_unknowns_and_forces();
        }

        if (this._unknown_horizontals === 1 && this._horizontal_unbalanced_force !== 0) {
            this._solve_unknown_connection([0, 180], this._horizontal_unbalanced_force, "horizontal");
        }

        for (const connection of this.connections) {
            if (connection.from === this) {
                connection.to.solve_connections();
            } else {
                connection.from.solve_connections();
            }
        }
    }

    add_force(applied_force) {
        this.applied_forces.push(applied_force);
    }

    remove_force(applied_force) {
        const index = this.applied_forces.indexOf(applied_force);
        if (index !== -1) {
            this.applied_forces.splice(index, 1);
        }
    }

    _is_finished() {
        return this.connections.every(connection => connection.is_known());
    }

    _get_unknowns_and_forces() {
        this._unknown_verticals = 0;
        this._unknown_horizontals = 0;
        this._vertical_unbalanced_force = 0;
        this._horizontal_unbalanced_force = 0;

        this.connections.forEach(connection => {
            if (connection.is_known()) {
                // because the force acts both directions, depending on what side of the connection you are on
                // i have to check do this if statement. the sign convention is always from - to, not to - from,
                // so -= instead of += if its to - from.
                if (connection.from === this) {
                    this._vertical_unbalanced_force += connection.calculation_vertical_force;
                    this._horizontal_unbalanced_force += connection.calculation_horizontal_force;           
                } else {
                    this._vertical_unbalanced_force -= connection.calculation_vertical_force;
                    this._horizontal_unbalanced_force -= connection.calculation_horizontal_force;       
                }
            } else {
                this._unknown_verticals += 1;
                this._unknown_horizontals += 1;

                if (connection.calculation_angle === 90 || connection.calculation_angle === 270) {
                    this._unknown_verticals -= 1;
                } else if (connection.calculation_angle === 0 || connection.calculation_angle === 180) {
                    this._unknown_horizontals -= 1;
                }
            }
        });

        this._vertical_unbalanced_force += this._applied_vertical_force;
        this._horizontal_unbalanced_force += this._applied_horizontal_force;
    }      

    _solve_unknown_connection(unwanted_angles, unbalanced_force, direction) {
        for (const connection of this.connections) {
            if (unwanted_angles.includes(connection.calculation_angle)) {
                continue;
            } else if (!connection.is_known()) {
                if (connection.from === this) {
                    connection.calculate_force(unbalanced_force, direction);
                } else {
                    connection.calculate_force(unbalanced_force, direction);
                    connection.flip_force_signs();
                }
                return;
            }
        }
    }
}

class AppliedForce {
    constructor(force, angle, assosciated_point) {
        this.force = force;
        this.angle = angle;
        this.assosciated_point = assosciated_point;
    }

    attempt_to_solve_forces(connection_list) {
        this.assosciated_point.start_solving_connections(this, connection_list);
    }
}

function resolve_force(force, angle) {
    //angle measured from clockwise vertical, and should be positive.
    const horizontal_force = (angle <= 90 
                              ? Math.sin(deg_to_rad(angle))
                              : angle <= 180
                              ? Math.cos(deg_to_rad(angle - 90)) 
                              : angle <= 270
                              ? Math.sin(deg_to_rad(angle - 180)) * -1
                              : Math.cos(deg_to_rad(angle - 270)) * -1)
                              * force;

    const vertical_force = (angle <= 90 
                           ? Math.cos(deg_to_rad(angle))
                           : angle <= 180
                           ? Math.sin(deg_to_rad(angle - 90)) * -1
                           : angle <= 270
                           ? Math.cos(deg_to_rad(angle - 180)) * -1
                           : Math.sin(deg_to_rad(angle - 270)))
                           * force;

    return [horizontal_force, vertical_force];
}

function make_positive_angle(a) {
    const new_angle = a % 360;
    return new_angle < 0 ? 360 + new_angle : new_angle;
}

function deg_to_rad(angle) {
    return angle * (Math.PI / 180);
}

function add_applied_force(id, force, angle, point) {
    // the making of the applied force already attaches it to the point and the global.
    const applied_force = new AppliedForce(id, force, angle, point);
    all_applied_forces.push(applied_force);
    point.add_force(applied_force);
}

function get_point(point_name, points_list) {
    // takes a point name (a string) and returns its corresponding object from the list. Or undefined if it doesn't exist.
    for (const point of points_list) {
        if (point_name.toUpperCase() === point.name.toUpperCase()) {
            return point;
        }
    }
    return undefined;
}

function get_valid_connections(connection_list, points_list) {
    // Removes duplicate connections, bad connections, and updates the from/to of the connection to the actual points instead of being strings.
    const duplicate_connection_list = [];
    const ok_connections = [];

    function get_connection_points(connection) {
        return [connection.from.toUpperCase(), connection.to.toUpperCase()].sort().join("");
    }

    function set_from_to(connection) {
        // expects a valid from and to. returns true if the points were successfully found and set, and false if otherwise.
        const from_point = get_point(connection.from, points_list);
        const to_point = get_point(connection.to, points_list);

        if (from_point === undefined || to_point === undefined || from_point === to_point) {
            return false;
        }

        connection.from = from_point;
        connection.to = to_point;
        return true;
    }

    for (const connection of connection_list) {
        if (connection.angle === null || connection.from === null || connection.to === null) {
            continue;
        }

        const connection_points = get_connection_points(connection);
        if (duplicate_connection_list.includes(connection_points)) {
            continue;
        }

        if (connection.force) {
            if (connection.force_type) {
                connection.promise_to_set_force(connection.force, connection.force_type);
            }
            // if the force is defined without a force_type, it'll cause problems as it will count as known. So just mark it null.
            connection.force = null;
        }

        const is_points_set = set_from_to(connection);
        if (is_points_set) {
            ok_connections.push(connection);
            duplicate_connection_list.push(connection_points);
        }
    }

    return ok_connections;
}

function get_valid_applied_forces(applied_forces_list, points_list) {
    const ok_forces = [];
    for (const applied_force of applied_forces_list) {
        if (applied_force.force !== null && applied_force.angle !== null && applied_force.assosciated_point !== null) {
            const applied_force_point = get_point(applied_force.assosciated_point, points_list);;

            if (applied_force_point !== undefined) {
                applied_force.assosciated_point = applied_force_point;
                applied_force_point.add_force(applied_force);
                ok_forces.push(applied_force);
            }
        }
    }
    return ok_forces;
}

function solve_diagram(points_list, connection_list, applied_forces_list) {
    // Solves the diagram as much as possible. Returns the connection list, with the details filled in.
    const valid_connections = get_valid_connections(connection_list, points_list);
    const valid_applied_forces = get_valid_applied_forces(applied_forces_list, points_list);

    for (const connection of valid_connections) {
        // These connections have the exact same object reference (i.e. they are the exact same), so they will both update if one solves.
        connection.from.connections.push(connection);
        connection.to.connections.push(connection);
    }

    for (const applied_force of valid_applied_forces) {
        // I am so tired
        applied_force.attempt_to_solve_forces(valid_connections);
    }

    return valid_connections;
}



function test() {
    const points_list = [new Point("A"), new Point("B"), new Point("C")];
    
    const connection_list = [new Connection("a", "B", 150),
                       new Connection("a", "a", 152), // should reject
                       new Connection("b", "a", 210), // should reject
                       new Connection("A", "C", 90),
                       new Connection("d", null, 123), // should reject
                       new Connection("C", "B", 200)];

    const applied_force_list = [new AppliedForce(null, null, null),
                          new AppliedForce(1, 2, null),
                          new AppliedForce(15, 0, "a")];


    

    console.log(solve_diagram(points_list, connection_list, applied_force_list));
}

//export { Point, Connection, AppliedForce, solve_diagram };